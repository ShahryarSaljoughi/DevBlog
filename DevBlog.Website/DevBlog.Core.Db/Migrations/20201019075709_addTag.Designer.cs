// <auto-generated />
using System;
using DevBlog.Core.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DevBlog.Core.Db.Migrations
{
    [DbContext(typeof(SmDbContext))]
    [Migration("20201019075709_addTag")]
    partial class addTag
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DevBlog.Core.Model.Entity.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentHtml")
                        .HasColumnName("content_html")
                        .HasColumnType("text");

                    b.Property<string>("ContentJson")
                        .HasColumnName("content_json")
                        .HasColumnType("text");

                    b.Property<string>("ContentText")
                        .HasColumnName("content_text")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreationDateTime")
                        .HasColumnName("creation_date_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<int?>("SeenCount")
                        .HasColumnName("seen_count")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TagId")
                        .HasColumnName("tag_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_article");

                    b.HasIndex("TagId")
                        .HasName("ix_article_tag_id");

                    b.ToTable("article");
                });

            modelBuilder.Entity("DevBlog.Core.Model.Entity.ArticleTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleId")
                        .HasColumnName("article_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnName("tag_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_article_tag");

                    b.HasIndex("ArticleId")
                        .HasName("ix_article_tag_article_id");

                    b.HasIndex("TagId")
                        .HasName("ix_article_tag_tag_id");

                    b.ToTable("article_tag");
                });

            modelBuilder.Entity("DevBlog.Core.Model.Entity.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_tag");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("DevBlog.Core.Model.Entity.Article", b =>
                {
                    b.HasOne("DevBlog.Core.Model.Entity.Tag", null)
                        .WithMany("Articles")
                        .HasForeignKey("TagId")
                        .HasConstraintName("fk_article_tag_tag_id");
                });

            modelBuilder.Entity("DevBlog.Core.Model.Entity.ArticleTag", b =>
                {
                    b.HasOne("DevBlog.Core.Model.Entity.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_article_tag_article_article_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevBlog.Core.Model.Entity.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("fk_article_tag_tag_tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
